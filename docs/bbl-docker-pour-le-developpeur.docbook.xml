<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Docker sur le poste du développeur</title>
<date>2022-10-02</date>
<author>
<personname>
<firstname>Marc</firstname>
<surname>Bouvier</surname>
</personname>
</author>
<authorinitials>MB</authorinitials>
</info>
<section xml:id="_docker">
<title>Docker</title>
<blockquote>
<attribution>
Wikipedia
<citetitle><link xl:href="https://fr.wikipedia.org/wiki/Docker_(logiciel)">Docker (logiciel)</link></citetitle>
</attribution>
<simpara>Docker est une plateforme permettant de lancer certaines applications dans des conteneurs logiciels.</simpara>
</blockquote>
<section xml:id="_docker_compose">
<title>Docker Compose</title>
<blockquote>
<attribution>
Wikipedia
<citetitle>Docker (logiciel) : <link xl:href="https://fr.wikipedia.org/wiki/Docker_(logiciel)#Outils_associ.C3.A9s">Outils associés</link></citetitle>
</attribution>
<simpara>Docker Compose est un logiciel pour définir et exécuter des applications à partir de multiples conteneurs.
Il est basé sur un fichier YAML qui permet de définir les services et les paramètres de leurs créations et ainsi de les démarrer par une commande unique.</simpara>
</blockquote>
</section>
<section xml:id="_docker_hub">
<title>Docker Hub</title>
<simpara>Catalogue d&#8217;images docker.</simpara>
<simpara><link xl:href="https://hub.docker.com/">hub.docker.com</link></simpara>
</section>
<section xml:id="_ouvrir_un_terminal_dans_un_container">
<title>Ouvrir un terminal dans un container</title>
<programlisting language="shell" linenumbering="unnumbered">docker run -it --rm alpine</programlisting>
<simpara>Dans Docker Desktop</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="assets/open-terminal-container.png" contentwidth="500"/>
</imageobject>
<textobject><phrase>open terminal container</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
</section>
<section xml:id="_cas_dutilisation_12">
<title>Cas d&#8217;utilisation 1/2</title>
<para role="notes">
<simpara>Docker et docker-compose peuvent être utiles au quotidien pour les développeurs.</simpara>
</para>
<itemizedlist>
<listitem>
<simpara>Utiliser des outils sans les installer</simpara>
</listitem>
<listitem>
<simpara>Tester un logiciel compliqué à installer</simpara>
</listitem>
<listitem>
<simpara>Test containers</simpara>
</listitem>
<listitem>
<simpara>Reproduire la CI en local</simpara>
</listitem>
<listitem>
<simpara>Environnements de développement conteneurisés</simpara>
</listitem>
</itemizedlist>
<section xml:id="_cas_dutilisation_22">
<title>Cas d&#8217;utilisation 2/2</title>
<itemizedlist>
<listitem>
<simpara>Lancer des logiciels dont on ne connaît pas la technologie</simpara>
</listitem>
<listitem>
<simpara>Tester une nouvelle version d&#8217;un langage</simpara>
</listitem>
<listitem>
<simpara>Être admin dans un container</simpara>
</listitem>
<listitem>
<simpara>Infrastructure éphémère</simpara>
</listitem>
<listitem>
<simpara>Bac à sable</simpara>
</listitem>
<listitem>
<simpara>Simuler l&#8217;environnement cible en local</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_01_utiliser_des_outils_sans_les_installer">
<title>01 Utiliser des outils sans les installer</title>
<para role="notes">
<itemizedlist>
<listitem>
<simpara>Éviter de polluer son environnement</simpara>
</listitem>
</itemizedlist>
</para>
<itemizedlist>
<listitem>
<simpara>base de données</simpara>
</listitem>
<listitem>
<simpara>serveur d&#8217;authentification</simpara>
</listitem>
</itemizedlist>
<section xml:id="_rabbitmq_installation_classique">
<title>RabbitMq — installation classique</title>
<simpara>Installation classique de RabbitMq</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="assets/rabbitmq_manual_installation.gif"/>
</imageobject>
<textobject><phrase>rabbitmq manual installation</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_rabbitmq_lancement_avec_docker">
<title>RabbitMq — lancement avec docker</title>
<programlisting language="yml" linenumbering="unnumbered">  01-rabbitmq:
    # http://localhost:15672
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    # guest / guest</programlisting>
<programlisting language="shell" linenumbering="unnumbered">docker compose up 01-rabbitmq</programlisting>
<simpara><link xl:href="http://localhost:15672">http://localhost:15672</link></simpara>
</section>
<section xml:id="_asciidoctor">
<title>Asciidoctor</title>
<para role="notes">
<simpara>Asciidoctor est un format de markup.
C&#8217;est aussi un outil qui permet de générer du contenu.</simpara>
</para>
<itemizedlist>
<listitem>
<simpara>html</simpara>
</listitem>
<listitem>
<simpara>pdf</simpara>
</listitem>
<listitem>
<simpara>slides</simpara>
</listitem>
<listitem>
<simpara>ebook</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_démo_asciidoctor">
<title>Démo Asciidoctor</title>
<simpara>Ces slides <footnote><simpara><link xl:href="https://github.com/baldir-fr/bbl-docker-pour-le-developpeur">https://github.com/baldir-fr/bbl-docker-pour-le-developpeur</link></simpara></footnote></simpara>
<simpara><literal>docker-compose.yml</literal></simpara>
<programlisting language="yml" linenumbering="unnumbered">  build-slides:
    image: "asciidoctor/docker-asciidoctor"
    volumes:
      - ./:/documents/
    command:
      - "asciidoctor-revealjs"
      - "-a"
      - "revealjsdir=https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.9.2"
      - "01-slides/index.adoc"
      - "-o"
      - "docs/index.html"</programlisting>
<programlisting language="shell" linenumbering="unnumbered">docker compose run build-slides</programlisting>
</section>
</section>
<section xml:id="_02_tester_un_logiciel_compliqué_à_installer">
<title>02 Tester un logiciel compliqué à installer</title>
<para role="notes">
<itemizedlist>
<listitem>
<simpara>Par exemple **Gitlab (nécessite beaucoup de mémoire)</simpara>
<itemizedlist>
<listitem>
<simpara>Nextcloud</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Pratique pour jouer avec la configuration</simpara>
</listitem>
</itemizedlist>
</para>
<section xml:id="_démo_nextcloud_postgresql">
<title>Démo Nextcloud + PostgreSQL</title>
<programlisting language="yml" linenumbering="unnumbered">services:
  nc:
    # http://localhost/login
    # admin / admin
    image: nextcloud:apache
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD=nextcloud
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
    ports:
      - 80:80
    restart: always
    volumes:
      - .volumes/nc_data:/var/www/html
  db:
    image: postgres:alpine
    environment:
      - POSTGRES_PASSWORD=nextcloud
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
    restart: always
    volumes:
      - .volumes/db_data:/var/lib/postgresql/data
    expose:
      - 5432</programlisting>
<programlisting language="shell" linenumbering="unnumbered">docker compose -f 02-tester-logiciel-compliqué/nextcloud/docker-compose.yml up</programlisting>
<simpara><link xl:href="http://localhost:80">http://localhost:80</link></simpara>
</section>
</section>
<section xml:id="_03_test_containers">
<title>03 Test Containers</title>
<para role="notes">
<itemizedlist>
<listitem>
<simpara>lance un conteneur juste le temps des tests</simpara>
</listitem>
<listitem>
<simpara>bases de données</simpara>
</listitem>
<listitem>
<simpara>Nginx</simpara>
</listitem>
<listitem>
<simpara>rabbitMq</simpara>
</listitem>
</itemizedlist>
</para>
<simpara><link xl:href="https://www.testcontainers.org/">testcontainers.org</link></simpara>
<section xml:id="_spring_boot_testcontainers_redis_12">
<title>Spring Boot + TestContainers + Redis 1/2</title>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = DemoApplication.class,
  webEnvironment = WebEnvironment.RANDOM_PORT, properties = {
  "spring.datasource.url=jdbc:tc:postgresql:11-alpine:///databasename",
})
@ActiveProfiles("test")
public abstract class AbstractIntegrationTest {

  static GenericContainer&lt;?&gt; redis = new GenericContainer&lt;&gt;(
    DockerImageName.parse("redis:3-alpine"))
    .withExposedPorts(6379);

  @DynamicPropertySource
  static void redisProperties(DynamicPropertyRegistry registry) {
    redis.start();
    registry.add("spring.redis.host", redis::getHost);
    registry.add("spring.redis.port", redis::getFirstMappedPort);
  }
}</programlisting>
</section>
<section xml:id="_spring_boot_testcontainers_redis_12_2">
<title>Spring Boot + TestContainers + Redis 1/2</title>
<programlisting language="java" linenumbering="unnumbered">public class DemoControllerTest extends AbstractIntegrationTest {

  @Autowired
  TestRestTemplate restTemplate;

  @Autowired
  DemoRepository demoRepository;

  @Test
  public void simpleTest() {
    String fooResource = "/foo";

    restTemplate.put(fooResource, "bar");

    assertThat(restTemplate.getForObject(fooResource, String.class))
      .as("value is set")
      .isEqualTo("bar");
  }

  @Test
  public void simpleJPATest() {
    DemoEntity demoEntity = new DemoEntity();
    demoEntity.setValue("Some value");
    demoRepository.save(demoEntity);

    DemoEntity result = restTemplate.getForObject(
      "/" + demoEntity.getId(), DemoEntity.class);

    assertThat(result.getValue())
      .as("value is set")
      .isEqualTo("Some value");
  }

}</programlisting>
</section>
<section xml:id="_démo">
<title>Démo</title>
<programlisting language="shell" linenumbering="unnumbered">cd 03-test-containers/spring-boot/
./gradlew build</programlisting>
<simpara><link xl:href="https://github.com/baldir-fr/bbl-docker-pour-le-developpeur/tree/main/03-test-containers/spring-boot">https://github.com/baldir-fr/bbl-docker-pour-le-developpeur/tree/main/03-test-containers/spring-boot</link></simpara>
</section>
</section>
<section xml:id="_04_reproduire_la_ci_en_local">
<title>04 Reproduire la CI en local</title>
<para role="notes">
<simpara>Lancer des scripts sur le même environnement que la CI</simpara>
</para>
</section>
<section xml:id="_05_environnements_de_développement_conteneurisés">
<title>05 Environnements de développement conteneurisés</title>
<para role="notes">
<itemizedlist>
<listitem>
<simpara>Vs code remote</simpara>
</listitem>
<listitem>
<simpara>Gitpod</simpara>
</listitem>
<listitem>
<simpara>Code Server</simpara>
</listitem>
</itemizedlist>
</para>
<section xml:id="_code_server">
<title>Code Server</title>
<simpara><link xl:href="https://github.com/coder/code-server">https://github.com/coder/code-server</link></simpara>
<simpara>Editeur de code pré-configuré sur le navigateur.</simpara>
</section>
<section xml:id="_démo_2">
<title>Démo</title>
<programlisting language="yml" linenumbering="unnumbered">  05-code-server:
    # http://localhost:8094
    image: registry.gitlab.com/crafting-software/online-code/js
    user: code
    ports:
      - "8094:8080"
    environment:
      - PASSWORD=testing</programlisting>
<programlisting language="shell" linenumbering="unnumbered">docker compose up -d 05-code-server</programlisting>
<simpara><link xl:href="http://localhost:8094">http://localhost:8094</link></simpara>
</section>
</section>
<section xml:id="_06_lancer_des_logiciels_dont_on_ne_connaît_pas_la_technologie">
<title>06 Lancer des logiciels dont on ne connaît pas la technologie</title>
<para role="notes">
<itemizedlist>
<listitem>
<simpara>Par exemple springboot si on fait du JavaScript</simpara>
</listitem>
<listitem>
<simpara>Keycloak</simpara>
</listitem>
<listitem>
<simpara>ffmpeg + imagemagick</simpara>
</listitem>
</itemizedlist>
</para>
<simpara><link xl:href="https://github.com/docker/awesome-compose">Awesome Docker Compose</link> starters</simpara>
<section xml:id="_conversion_de_mov_en_gif">
<title>Conversion de .mov en .gif</title>
<simpara><link xl:href="https://toub.es/2017/09/11/high-quality-gif-with-ffmpeg-and-docker/">https://toub.es/2017/09/11/high-quality-gif-with-ffmpeg-and-docker/</link></simpara>
<programlisting language="shell" linenumbering="unnumbered">alias video2gif='sudo docker run -v=`pwd`:/tmp/ffmpeg kafebob/video2gif'</programlisting>
<programlisting language="shell" linenumbering="unnumbered">video2gif rabbitmq_manual_installation.mov rabbitmq_manual_installation.gif</programlisting>
</section>
</section>
<section xml:id="_07_tester_une_nouvelle_version_dun_langage">
<title>07 Tester une nouvelle version d&#8217;un langage</title>
<para role="notes">
<itemizedlist>
<listitem>
<simpara>(ex. java 11 java 17..)</simpara>
</listitem>
</itemizedlist>
</para>
<section xml:id="_java_8">
<title>Java 8</title>
<programlisting language="yml" linenumbering="unnumbered">  07-movie-rental-java-8:
    image: "maven:3-openjdk-8-slim"
    working_dir: "/java-app"
    volumes:
      - "./07-movie-rental-java-8:/java-app"
      - "./.volumes/07-movie-rental-java-8-.m2:/root/.m2"
    command:
      - "mvn"
      #      - "-Dmaven.compiler.source=8"
      - "clean"
      - "test"</programlisting>
<programlisting language="shell" linenumbering="unnumbered">docker compose run 07-movie-rental-java-8</programlisting>
</section>
<section xml:id="_java_17">
<title>Java 17</title>
<programlisting language="yml" linenumbering="unnumbered">  07-movie-rental-java-17:
    image: "maven:3-openjdk-17-slim"
    working_dir: "/java-app"
    volumes:
      - "./07-movie-rental-java-17:/java-app"
      - "./.volumes/07-movie-rental-java-17-.m2:/root/.m2"
    command:
      - "mvn"
#      - "-Dmaven.compiler.source=17"
      - "clean"
      - "test"</programlisting>
<programlisting language="shell" linenumbering="unnumbered">docker compose run 07-movie-rental-java-17</programlisting>
</section>
</section>
<section xml:id="_08_être_admin_dans_un_conteneur">
<title>08 Être admin dans un conteneur</title>
<para role="notes">
<itemizedlist>
<listitem>
<simpara>quand on n&#8217;est pas admin de sa machine sur Windows par exemple</simpara>
</listitem>
</itemizedlist>
</para>
<itemizedlist>
<listitem>
<simpara>installer des paquets sur une image</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_09_infrastructure_éphémère">
<title>09 Infrastructure éphémère</title>
<para role="notes">
<simpara>Lancer un serveur pour le temps d&#8217;un événement * Pour un événement donné, lancer un serveur * Le supprimer à la fin de l&#8217;événement * Permet aux participants d&#8217;accéder à l&#8217;outil sans s&#8217;inscrire par exemple (les données sont supprimées à la fin de l&#8217;événement)</simpara>
</para>
<section xml:id="_tiddlywiki">
<title>Tiddlywiki</title>
<programlisting language="yml" linenumbering="unnumbered">  09-tiddlywiki:
    # http://localhost:8082
    image: "nicolaw/tiddlywiki"
    ports:
      - "8082:8080"
    volumes:
      - "./09-tiddlywiki:/var/lib/tiddlywiki"</programlisting>
<programlisting language="shell" linenumbering="unnumbered">docker compose up -d 09-tiddlywiki</programlisting>
<simpara><link xl:href="http://localhost:8082">http://localhost:8082</link></simpara>
</section>
</section>
<section xml:id="_10_bac_à_sable">
<title>10 Bac à sable</title>
<para role="notes">
<itemizedlist>
<listitem>
<simpara>Expérimenter sans risques</simpara>
</listitem>
<listitem>
<simpara>Essayer des choses risquées dans un environnement safe</simpara>
</listitem>
<listitem>
<simpara>apprendre les commandes linux sans tout casser</simpara>
<itemizedlist>
<listitem>
<simpara>sous réserve de certaines précautions</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</para>
<section xml:id="_réduire_la_boucle_de_feedback_pour_optimiser_du_code">
<title>Réduire la boucle de feedback pour optimiser du code</title>
<simpara><link xl:href="https://www.bertrand-bougon.fr/experimentation/xp/2022/09/29/how-to-be-proud-of-an-experimentation.html">How to be proud of an experimentation</link> — Bertand Bougon</simpara>
<simpara><link xl:href="https://twitter.com/BBougon">@BBougon</link></simpara>
</section>
<section xml:id="_apprendre_les_commandes_linux">
<title>Apprendre les commandes linux</title>
<simpara><link xl:href="https://hub.docker.com/_/busybox">Busybox</link> : <link xl:href="https://en.wikipedia.org/wiki/BusyBox#Commands">Commandes disponibles</link></simpara>
<programlisting language="shell" linenumbering="unnumbered">docker run -it --rm busybox</programlisting>
<simpara><link xl:href="https://hub.docker.com/_/alpine">Alpine</link></simpara>
<programlisting language="shell" linenumbering="unnumbered">docker run -it --rm alpine</programlisting>
</section>
</section>
<section xml:id="_11_simuler_lenvironnement_cible_en_local">
<title>11 Simuler l&#8217;environnement cible en local</title>
<para role="notes">
<itemizedlist>
<listitem>
<simpara>ex depuis windows exécuter sur linux</simpara>
</listitem>
</itemizedlist>
</para>
<section xml:id="_keycloak_vuejs_spring_boot_13">
<title>Keycloak + Vuejs + Spring-boot 1/3</title>
<programlisting language="yml" linenumbering="unnumbered">version: "3.8"

# This docker compose file assumes that the local loopback (127.0.0.1)
# is bound to the hostname `kubernetes.docker.internal`
#
# For users that are using Docker Desktop (Windows, MacOs)
# They should already have the following binding in
# `/etc/hosts` or `c:/windows/system32/drivers/etc/hosts`
#
# Linux user will need to add it : `etc/hosts`
#
# 127.0.0.1 kubernetes.docker.internal

services:
  auth-server:
    # http://kubernetes.docker.internal:8080
    # admin / admin
    image: "quay.io/keycloak/keycloak:19.0.1"
    ports:
      - "8080:8080"
      - "8443:8443"
    env_file:
      - "keycloak-dev-8080-8443/.env.docker-compose"
    volumes:
      - "./keycloak-dev-8080-8443/data/import/:/opt/keycloak/data/import/"
    command:
      - "start-dev --import-realm"
  backend:
    # http://kubernetes.docker.internal:8081
    image: "maven:3-openjdk-17-slim"
    working_dir: "/backend"
    depends_on: ["auth-server"]
    volumes:
      - "./.volumes/backend-target:/backend/target"
      - "./backend-api-8081:/backend"
      - "./.volumes/backend-.m2:/root/.m2"
    ports:
      - "8081:8081"
    env_file:
      - "backend-api-8081/.env.docker-compose"
    command:
      - "mvn"
      - "-Dmaven.compiler.source=17"
      - "spring-boot:run"
  frontend:
    # http://kubernetes.docker.internal:5173
    # user / user
    image: "node:lts"
    working_dir: "/home/node/app"
    depends_on: ["auth-server"]
    volumes:
      - "./.volumes/frontend-node_modules:/home/node/app/node_modules"
      - "./frontend-app-5173:/home/node/app"
    ports:
      - "5173:5173"
    entrypoint: [ "bash", "-c" ]
    command:
      - "npm install &amp;&amp; npm run dev -- --host --mode docker-compose"</programlisting>
</section>
<section xml:id="_keycloak_vuejs_spring_boot_23">
<title>Keycloak + Vuejs + Spring-boot 2/3</title>
<programlisting language="shell" linenumbering="unnumbered">docker compose -f 11-simuler-environnement-cible/docker-for-local-development-bbl-main/docker-compose.yml up -d</programlisting>
<simpara><link xl:href="http://kubernetes.docker.internal:8080">http://kubernetes.docker.internal:8080</link></simpara>
<simpara><link xl:href="http://kubernetes.docker.internal:5173">http://kubernetes.docker.internal:5173</link></simpara>
</section>
<section xml:id="_keycloak_vuejs_spring_boot_33">
<title>Keycloak + Vuejs + Spring-boot 3/3</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="assets/11-docker-compose.png"/>
</imageobject>
<textobject><phrase>11 docker compose</phrase></textobject>
</mediaobject>
</informalfigure>
<programlisting language="shell" linenumbering="unnumbered">docker run --rm -it --name dcv -v $(pwd):/input pmsipilot/docker-compose-viz render -m image -f docker-compose.yml</programlisting>
</section>
</section>
<section xml:id="_merci">
<title>🙏 Merci</title>
<simpara>Des questions?
🖐</simpara>
<simpara><link xl:href="https://u.baldir.fr/bbl-dev-container">u.baldir.fr/bbl-dev-container</link></simpara>
</section>
</article>